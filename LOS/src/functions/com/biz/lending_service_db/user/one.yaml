summary: Fetch User
tasks:
  - id: lending_service_db_user_one
    fn: datasource.lending_service_db.User.findUnique
    args:
      where:
        id: <% parseInt(inputs.params.id) %>
    logs:
      before:
        message: About to get user from id
        level: debug
        attributes:
          fn_event_type: find_one
          fn_entity_type: User
          fn_entity_id: <%inputs.params.id%>
      after:
        message: Find one reponse for User in task
        level: debug
        attributes:
          fn_event_type: find_one
          fn_entity_type: User
          fn_entity_id: <%inputs.params.id%>
        params:
          response: <%outputs.lending_service_db_user_one.data%>
    caching:
      before:
        # datasource: in_mem_cache #the name of the datasource instance to use instead of default cache
        key: <%'User_' + inputs.params.id%> # Optional. Key name which is used to read from and write cache result of this task in applicable cache.
      after:
        key: <%'User_' + inputs.params.id%> # Optional. Key name which is used to write to cache result of this task in applicable cache.
        #invalidate: # <Key name which we want to delete/remove from cache e.g. this feature can be used in CRUD types task. While delete operation, invalidate the cache of read or update task>
        #options: #Optional
        #  EX: 200 # <timer in seconds, until the cached result is valid> #Can pass any of RedisOptions, if supported by the specific caching Datasource 
        cache_on_failure: false # <true|false, whether you want to cache the failure result or not. By default, it is false>
    