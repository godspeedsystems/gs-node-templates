summary: Create User
tasks:
  - id: lending_service_db_user_create
    fn: datasource.lending_service_db.User.create
    args:
      data: <% inputs.body %>
    on_error:
      continue: false
      # response: # generate custom response on the error
      #   success: false
      #   code: 500
      #   data:
      #     error: <%outputs.lending_service_db_user_create.data%>
      # tasks: # You can also give a series of tasks here
      #   - id: create_user_error_handler
      #     fn: com.gs.return
      #     args:
      #       success: false
      #       code: 500
      #       error: <%outputs.lending_service_db_user_create.data%>
    caching:
      after:
        datasource: in_mem_cache #the name of the datasource instance to use instead of default cache
        key: <%'User_' + outputs.lending_service_db_user_create?.data?.id%> # <Optional. Key name which is used to read from and write cache result of this task in applicable cache. Also see noRead and noWrite flags>
        cache_on_failure: false # <true|false, whether you want to cache the failure result or not. By default, it is false>
        #options: #Optional
        #  EX: 200 # <timer in seconds, until the cached result is valid> #Can pass any of RedisOptions, if supported by the specific caching Datasource 
    logs:
      before:
        message: About to create user in task
        level: debug
        attributes:
          fn_event_type: create
          fn_entity_type: user
          fn_user_pan_number: <%inputs.body.pan_number%>
      after:
        message: Created user in task
        level: debug
        attributes:
          fn_entity_id: <% outputs.lending_service_db_user_create.data.id %>
          fn_event_type: created
          fn_entity_type: user
          fn_user_pan_number: <%inputs.body.pan_number%>
        params:
          response: <%outputs.lending_service_db_user_create.data%>